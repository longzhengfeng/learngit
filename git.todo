git学习:
 □ 创建版本库
   --在git安装的目录下，创建一个空目录文件夹。mkdir 文件夹名（如：mkdir learngit)
   --进入到该文件夹下面。cd 文件夹名
   --pwd 显示当前目录
   --git init 看见Initialized empty Git repository in /Users/michael/learngit/.git/（表示仓库建好）

 □ 把文件添加到版本库
   --在git仓库learngit目录下（一定要放到learngit目录下，或子目录下），手动的添加一个readme.txt文档，输入一些内容。保存

   --第一步：用命令git add告诉Git，把文件添加到仓库：git add readme.txt(执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。)

   --第二步：用命令git commit告诉Git，把文件提交到仓库：git commit -m "wrote a readme file"（git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。）

   --gitcommit命令执行成功后会告诉你，1个文件被改动（我们新添加的readme.txt文件），插入了两行内容（readme.txt有两行内容）。

   --为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件。

 □ 将修改后的文件提交到仓库
   --将原先的readme.txt在原来的目录下手动的去修改一下。（即在Windows上直接修改内容）
   --用git status命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，readme.txt被修改过了，但还没有准备提交的修改。
   --用git diff（difference的缩写）这个命令看修改了什么内容。
   --提交 git add 文件名
   --在执行第二步git commit之前，我们再运行git status看看当前仓库的状态
   --用git commit -m "注释你修改的内容"
   --提交后，我们再用git status命令看看仓库的当前状态：(nothing to commit (working directory clean))
   
 □ 版本回退
   --HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
   --穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
   --要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
   --用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：

 □ 添加远程库,上传文件
   注意：在上传文件的时候，因为多人使用同一个远程库，所以需要先将服务器上的内容先：git pull下，然后再上传。
   --先要在github上创建一个远程库：登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库。
   --在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：
   --要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
   --关联后，使用命令git push -u origin master第一次推送master分支的所有内容
   --此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

 □ 从远程库克隆
   --先要在github上面，创建一个远程库。当然在创建远程库的时候，你必须要登录github.
   --git clone git@github.com:longzhengfeng/gitskills.git


 □ 创建分支
   --查看分支：git branch
   --创建分支：git branch <name>
   --切换分支：git checkout <name>
   --创建+切换分支：git checkout -b <name>
   --合并某分支到当前分支：git merge <name>
   --删除分支：git branch -d <name>

 □ 创建标签
   --命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
   --git tag -a <tagname> -m "blablabla..."可以指定标签信息；
   --git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
   --命令git tag可以查看所有标签。

 □ 操作标签
    --命令git push origin <tagname>可以推送一个本地标签；
    --命令git push origin --tags可以推送全部未推送过的本地标签；
    --命令git tag -d <tagname>可以删除一个本地标签；
    --命令git push origin :refs/tags/<tagname>可以删除一个远程标签。


    /home/longzhengfeng/srv/sample.git/r


    git@github.com:longzhengfeng/learngit.git


    git@gitlab.hotpu.cn:longzhengfeng/kefu-case.git


    https://github.com/longzhengfeng/learngit.git
    
    



